#!/usr/bin/env python

import re
import os
import sys
import yaml
import subprocess
import itertools
from optparse import OptionParser

import jujuclient


JUJU_ENV = os.environ['JUJU_ENV']
JUJU_HOME = os.environ['JUJU_HOME']
CONFIG_FILE = os.path.join(JUJU_HOME, 'debug-hooks-rc.yaml')
DEFAULT_CONFIG = {'import_ids': [],
                  'uploads': {},
                  'init': os.path.join(JUJU_HOME, 'debug-hooks-rc.d'),
                  'use_tmux_bindings': False,
                  'sync_exclude': ['*.pyc', '.*']}


def show_help(option, opt, value, parser):
    print 'usage: juju debug-hooks-ext [options] <unit name> [hook names]'
    print 'purpose: Enhanced interactive remote hook debugging session, using tmux'
    print
    print 'options:'
    print '-c, --config (= "$JUJU_HOME/debug-hooks-rc.yaml")'
    print '    yaml file to use for customizing the debug-hooks environment'
    print '-e, --environment (= current)'
    print '    juju environment to operate in'
    print '-j, --join'
    print '    join an existing remove debug session (useful for paired debugging)'
    print '    does not use the Juju identity, so one of your ssh identities'
    print '    must have been imported (e.g., with import_ids, below)'
    print '    note that your customizations will not be made to joined sessions'
    print '-r, --restart'
    print '    restart the failed hook, such that the session can debug it'
    print '-s, --sync'
    print '    sync changes to the charm from the remote unit back locally'
    print '    this ensures that changes made while debugging the charm'
    print '    are preserved'
    print
    print 'config file options:'
    print 'import_ids'
    print '    list of Launchpad user IDs to import into Juju to give access to'
    print '    the remote debugging session (they should then use --join)'
    print 'init'
    print '    file or directory name containing script(s) to be run once to setup'
    print '    a new machine; will create or append to a .bashrc file on the machine'
    print 'sync_exclude'
    print '    list of file patterns for --sync to exclude (see rysnc --exclude)'
    print 'uploads'
    print '    a key-value map of local to remote files or directories to upload'
    print '    to the remote machine (this is only done once, and requires rsync)'
    print 'use_tmux_bindings'
    print '    create an empty .tmux.conf to reset tmux to its default key bindings'
    print '    instead of using the screen bindings (note: this option has no effect'
    print '    if a custom .tmux.conf file is created via the uploads or init options)'
    print
    print 'Note that the init script(s) will be run once, the first time the machine'
    print 'is connected to.  If you wish to have setup that runs each time, you will'
    print 'need to replace or append to the .bashrc file.  Also note that the init'
    print 'script(s) will block the login process, so if you have setup tasks that'
    print 'take a while to run, such as installing packages, you may want to run'
    print 'them in the background.'
    sys.exit()


def show_desc(option, opt, value, parser):
    print 'Enhanced interactive remote hook debugging session, using tmux'
    sys.exit()


def parse_args():
    parser = OptionParser(add_help_option=False)
    parser.add_option('-c', '--config', dest='config_file', default=CONFIG_FILE)
    parser.add_option('-e', '--environment', dest='env', default=JUJU_ENV)
    parser.add_option('-j', '--join', dest='join', action='store_true')
    parser.add_option('-r', '--restart', dest='restart', action='store_true')
    parser.add_option('-s', '--sync', dest='sync', action='store_true')
    parser.add_option('-h', '--help', action='callback', callback=show_help)
    parser.add_option('-d', '--description', action='callback', callback=show_desc)
    return parser.parse_args()


def customize(unit_name, unit, opts):
    config = dict(DEFAULT_CONFIG)
    if os.path.exists(os.path.expanduser(opts.config_file)):
        with open(os.path.expanduser(opts.config_file)) as fp:
            config = yaml.load(fp)
    if check_customized(unit_name, unit, opts):
        return config
    sys.stdout.write('Customizing machine...')
    sys.stdout.flush()
    for identity in config.get('import_ids', []):
        call('juju', 'authorized-keys', 'import', identity)
    uploads = config.get('uploads', {})
    if isinstance(uploads, (list, tuple)):
        uploads = {u: '' for u in uploads}
    for local, remote in uploads.iteritems():
        upload(unit.get('PublicAddress'), local, remote)
    if os.path.exists(os.path.expanduser(config.get('init', ''))):
        upload(unit.get('PublicAddress'), config['init'], '')
    upload(unit.get('PublicAddress'), os.path.join(os.path.dirname(__file__), 'jdhe-init.sh'),
           '.jdhe.init')
    call('juju', 'ssh', unit_name,
         'echo "JDHE_USER_INIT=\'%s\' ./.jdhe.init" >> .bashrc'
         % os.path.basename(config.get('init', '')))
    if config.get('use_tmux_bindings', False):
        call('juju', 'ssh', unit_name, 'touch .tmux.conf')
    print 'done.'
    set_customized(unit_name, unit, opts)
    return config


def check_customized(unit_name, unit, opts):
    env = get_env(opts)
    machine = unit.get('Machine')
    annotations = env.get_annotation(machine, 'machine')
    return 'jdhe-customized' in annotations['Annotations']


def set_customized(unit_name, unit, opts):
    env = get_env(opts)
    machine = unit.get('Machine')
    env.set_annotation(machine, 'machine', {'jdhe-customized': 'true'})


def get_env(opts):
    if hasattr(get_env, '_env'):
        return get_env._env
    get_env._env = jujuclient.Environment.connect(opts.env)
    return get_env._env


def call(*args):
    try:
        return subprocess.check_output(('/usr/bin/env',) + args,
                                       stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        sys.stderr.write(e.output)
        sys.exit(e.returncode)


def find_errored_unit(units):
    for name, unit in units.items():
        if unit['AgentState'] == 'error':
            return name


def choose_unit(args, opts):
    unit = args.pop(0) if args else None
    status = get_env(opts).status()
    services = status['Services']
    all_units = {n: u
                 for s in services.values() if 'Units' in s
                 for n, u in s['Units'].items()}
    units = all_units
    if unit in services:
        units = services[unit]['Units']
        unit = None
    if unit in units:
        return unit, all_units[unit]
    elif unit is not None:
        sys.stderr.write('Invalid unit: %s\n' % unit)
        sys.exit(1)
    if len(units) == 1:
        unit = units.keys()[0]
        return unit, all_units[unit]
    if os.path.exists('metadata.yaml'):
        with open('metadata.yaml') as fp:
            metadata = yaml.safe_load(fp)
            charm_name = metadata['name']
        charm_name = re.compile(r'local:[^/]*/{}-\d+'.format(charm_name))
        for service in services.values():
            if charm_name.match(service['Charm']):
                service_units = sorted(service['Units'].keys())
                errored_unit = find_errored_unit(service['Units'])
                unit = errored_unit or service_units[0]
                break
        else:
            unit = find_errored_unit(all_units)
    unit_names = sorted(units.keys())
    print 'Units:'
    for i, unit_name in enumerate(unit_names):
        print '%d: %s' % (i, unit_name)
    selection = raw_input('Type or select a unit: %s' %
                          ('[%s] ' % unit if unit else ''))
    if selection.isdigit():
        unit = unit_names[int(selection)]
    elif selection != '':
        unit = selection
    if unit not in all_units:
        sys.stderr.write('Invalid unit: %s\n' % unit)
        sys.exit(1)
    return unit, all_units[unit]


def upload(addr, local, remote):
    ssh_opts = '-i %s/ssh/juju_id_rsa -o UserKnownHostsFile=/dev/null ' \
               '-o StrictHostKeyChecking=no -o LogLevel=ERROR' % JUJU_HOME
    call('rsync', '-Wa', '-e', 'ssh %s' % ssh_opts,
         os.path.expanduser(local), 'ubuntu@%s:%s' % (addr, remote))


if __name__ == '__main__':
    opts, args = parse_args()
    if opts.join:
        if len(args) == 0:
            sys.stderr.write('You must provide an address\n')
            sys.exit(1)
        addr = args[0]
        os.execvp('ssh', ['ssh', '-t', 'ubuntu@%s' % addr, 'sudo tmux new-session -A'])
    else:
        unit_name, unit = choose_unit(args, opts)
        config = customize(unit_name, unit, opts)
        if opts.restart:
            subprocess.Popen(
                'sleep 2 ; juju resolved --retry -e %s "%s"' % (opts.env, unit_name),
                stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        result = subprocess.call(
            ['/usr/bin/env', 'juju', 'debug-hooks', '-e', opts.env] + [unit_name] + args)
        if result != 0:
            sys.exit(result)
        if opts.sync:
            print 'Syncing remote changes...'
            excludes = list(itertools.chain.from_iterable(
                [('--exclude', e) for e in config.get('sync_exclude', [])]))
            os.execvp('juju',
                      ['juju', 'sync-charm', '-y', unit_name, '.'] + excludes)  # TEST ME
